// Code generated by goadlc v3 - DO NOT EDIT.
package db

import ()

type DbColumnName = string

type DbColumnType = string

type DbKey[T any] string

type DbPrimaryKey = struct{}

type DbSpread = struct{}

type DbTable struct {
	_DbTable
}

type _DbTable struct {
	TableName             string     `json:"tableName"`
	Indexes               [][]string `json:"indexes"`
	UniquenessConstraints [][]string `json:"uniquenessConstraints"`
	ExtraSql              []string   `json:"extraSql"`
	Label                 []string   `json:"label"`
}

func MakeAll_DbTable(
	tablename string,
	indexes [][]string,
	uniquenessconstraints [][]string,
	extrasql []string,
	label []string,
) DbTable {
	return DbTable{
		_DbTable{
			TableName:             tablename,
			Indexes:               indexes,
			UniquenessConstraints: uniquenessconstraints,
			ExtraSql:              extrasql,
			Label:                 label,
		},
	}
}

func Make_DbTable() DbTable {
	ret := DbTable{
		_DbTable{
			TableName:             ((*DbTable)(nil)).Default_tableName(),
			Indexes:               ((*DbTable)(nil)).Default_indexes(),
			UniquenessConstraints: ((*DbTable)(nil)).Default_uniquenessConstraints(),
			ExtraSql:              ((*DbTable)(nil)).Default_extraSql(),
			Label:                 ((*DbTable)(nil)).Default_label(),
		},
	}
	return ret
}

func (*DbTable) Default_tableName() string {
	return ""
}
func (*DbTable) Default_indexes() [][]string {
	return [][]string{}
}
func (*DbTable) Default_uniquenessConstraints() [][]string {
	return [][]string{}
}
func (*DbTable) Default_extraSql() []string {
	return []string{}
}
func (*DbTable) Default_label() []string {
	return []string{}
}

type DbView struct {
	_DbView
}

type _DbView struct {
	ViewName string `json:"viewName"`
}

func MakeAll_DbView(
	viewname string,
) DbView {
	return DbView{
		_DbView{
			ViewName: viewname,
		},
	}
}

func Make_DbView() DbView {
	ret := DbView{
		_DbView{
			ViewName: ((*DbView)(nil)).Default_viewName(),
		},
	}
	return ret
}

func (*DbView) Default_viewName() string {
	return ""
}

type WithId[T any] struct {
	_WithId[T]
}

type _WithId[T any] struct {
	Id    string `json:"id"`
	Value T      `json:"value"`
}

func MakeAll_WithId[T any](
	id string,
	value T,
) WithId[T] {
	return WithId[T]{
		_WithId[T]{
			Id:    id,
			Value: value,
		},
	}
}

func Make_WithId[T any](
	id string,
	value T,
) WithId[T] {
	ret := WithId[T]{
		_WithId[T]{
			Id:    id,
			Value: value,
		},
	}
	return ret
}
